#!/usr/bin/python
# -*- coding: utf-8 -*-

import sys
import os
import getopt
import logging

from dialog.dialog_core import Dialog, DIALOG_VERSION

def usage():
    print """The LAAS-CNRS 'Dialog' module (v.""" + DIALOG_VERSION + """).

Usage:
dialog [OPTIONS]
  -h, --help			Displays this message and exits
  -v, --version			Returns Dialog version
  -t, --test			Runs unit-tests
  -d, --debug			Sets verbosity to debug
  -s, --silent			The module won't output anything

This module reads on stdin user input in natural language, parse it, call 
resolution routines when ambiguous concepts are used, and finally generate RDF 
statements that are an interpretation of the input.

It includes as well a verbalization module that conversely turns RDF statements
into a sentence in natural language.

dialog fits into the so-called CHRIS architecture @ LAAS. More details on the 
LAAS internal Wiki:
https://intranet.laas.fr/intranet/robots/wiki/ChrisArchitecture
"""

def unit_tests():
    print("Please run the 'dialog_test' Python script.")

def main():

    logger = logging.getLogger("dialog")
    
    debug_level = logging.INFO
    
    try:
        optlist, args = getopt.getopt(sys.argv[1:], 'htdsv', ['help', 'test', 'debug', 'silent', 'version'])
    except getopt.GetoptError, err:
        # print help information and exit:
        print str(err) # will print something like "option -a not recognized"
        usage()
        sys.exit(2)

    for o, a in optlist:
        if o in ("-h", "--help"):
            usage()
            sys.exit(0)
        elif o in ("-v", "--version"):
            print("dialog - " + DIALOG_VERSION)
            sys.exit(0)
        elif o in ("-t", "--test"):
            unit_tests()
            sys.exit(0)
        elif o in ("-d", "--debug"):
            debug_level = logging.DEBUG
        elif o in ("-s", "--silent"):
            debug_level = logging.CRITICAL
        else:
            print "Unhandled option " + o
            usage()
            sys.exit(2)

    # define a Handler which writes INFO messages or higher to the sys.stderr
    console = logging.StreamHandler()
    console.setLevel(debug_level)
    # set a format which is simpler for console use
    formatter = logging.Formatter('%(message)s')
    # tell the handler to use this format
    console.setFormatter(formatter)
    # add the handler to the root logger
    logger.addHandler(console)

    logger.info("**** DIALOG module ****")
    logger.info("v." + DIALOG_VERSION + "\n")

    dialog = Dialog()

    dialog.start()

    running = True
    while running:
        try:
            data = sys.stdin.readline()
            dialog.input(data)
            
        except KeyboardInterrupt:
            logger.info("Leaving now.")
            running = False
            dialog.stop()

    dialog.join()
    sys.exit()

if __name__ == '__main__':
    main()
