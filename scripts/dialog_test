#!/usr/bin/python
# -*- coding: utf-8 -*-

import sys
import logging
logging.basicConfig(level=logging.DEBUG, format="%(message)s")

import unittest

import dialog.verbalization.verbalization_test as verbalization

from dialog.dialog_core import Dialog

from dialog.resources_manager import ResourcePool

from dialog.sentence import *
import dialog.parsing.parser as parser
from dialog.parsing.parser import Parser

def check_results(res, expected):
    def check_triplets(tr , te):
        tr_split = tr.split()
        te_split = te.split()
        
        return (tr_split[0] == te_split[0] or te_split[0] == '*') and\
                (tr_split[1] == te_split[1]) and\
                (tr_split[2] == te_split[2] or te_split[2] == '*')       
    while res:
        r = res.pop()
        for e in expected:
            if check_triplets(r, e):
                expected.remove(e)
    return expected == res
    
class TestBaseSentenceDialog(unittest.TestCase):
    """Tests the processing of simple sentence by the Dialog module.
    These sentences don't require discrimination.
    This must be tested with oro-server using the testsuite.oro.owl ontology.
    """

    def setUp(self):
        self.dialog = Dialog()
        self.dialog.start()
        
        self.oro = ResourcePool().ontology_server
        
        try:
            self.oro.add(['shelf1 rdf:type Shelf',
                        'table1 rdf:type Table', 
                        'table2 rdf:type Table', 
                        'table2 hasColor blue', 
                        'Banana rdfs:subClassOf Plant',
                        'y_banana rdf:type Banana',
                        'y_banana hasColor yellow',
                        'y_banana isOn shelf1',
                        'y_banana belongsTo myself',
                        'green_banana rdf:type Banana',
                        'green_banana hasColor green',
                        'green_banana isOn table2',
                        'myself focusesOn y_banana',
                        'big_tree rdf:type Tree',
                        'big_tree hasSize big',
                        'red_apple rdf:type Apple',
                        'red_apple hasColor red'
                        ])
            
        except AttributeError: #the ontology server is not started of doesn't know the method
            pass

    def test_sentence1(self):

        print("\n##################### test_sentence1 ########################\n")
        
        ####
        stmt = "put the yellow banana on the shelf"
        ####

        expected_result = [ 'myself desires *',
                            '* rdf:type Place',
                            '* performedBy myself',
                            '* actsOnObject y_banana',
                            '* receivedBy shelf1']
        ###
        res = self.dialog.test('myself', stmt)
        self.assertTrue(check_results(res[0], expected_result))
        

    def test_sentence2(self):
        
        print("\n##################### test_sentence2 ########################\n")

        ####
        stmt = "give me the green banana"
        ####
        expected_result = [ 'myself desires *',
                            '* rdf:type Give',
                            '* performedBy myself',
                            '* actsOnObject green_banana',
                            '* receivedBy myself']
        ###
        res = self.dialog.test('myself', stmt)
        self.assertTrue(check_results(res[0], expected_result))
        

    def test_sentence3(self):
        
        print("\n##################### Simple statements ########################\n")              
                
        ####
        stmt = "the yellow banana is green"
        ####
        expected_result = ['y_banana hasColor green']
        ###
        res = self.dialog.test('myself', stmt)
        
        ###Check ontology consistency
        self.assertFalse(self.oro.safeAdd(res))
        ### Check result
        self.assertTrue(check_results(res[0], expected_result))
        
        
        ####
        stmt = "the green banana is good"
        ####
        res = self.dialog.test('myself', stmt)
        ###
        expected_result = ['green_banana hasFeature good']
        self.assertTrue(check_results(res[0], expected_result))
        
    def test_sentence4(self):
        
        print("\n##################### Subclasses ########################\n")
        ####
        stmt = "bananas are fruits"
        ####
        res = self.dialog.test('myself', stmt)
        ###
        expected_result = ['Banana rdfs:subClassOf Fruit']
        self.assertTrue(check_results(res[0], expected_result))
        
        
        ####
        stmt = "A banana is a fruit"
        ####
        res = self.dialog.test('myself', stmt)
        ###
        expected_result = ['Banana rdfs:subClassOf Fruit']
        self.assertTrue(check_results(res[0], expected_result))
    
        
        
    def test_sentence5(self):
        
        print("\n##################### test_sentence5 - THIS ########################\n")
        ####
        stmt = "This is my banana"
        ####
        res = self.dialog.test('myself', stmt)
        ###
        expected_result = ['y_banana belongsTo myself']
        self.assertTrue(check_results(res[0], expected_result))
        
        stmt = "This is a green banana" ## ERROR -> y_banana can not be green
        ####
        res = self.dialog.test('myself', stmt)
        ###
        self.assertFalse(self.oro.safeAdd(res))
        
        stmt = "This is a fruit" 
        ####
        res = self.dialog.test('myself', stmt)
        ###
        expected_result = ['y_banana rdf:type Fruit']

        self.assertTrue(check_results(res[0], expected_result))

    def test_sentence6(self):
        
        print("\n##################### test_sentence6 - it ########################\n")
        #Fill up History
        
        ##sentence1
        stmt = "the red apple is on the big tree"
        res = self.dialog.test('myself', stmt)
        
        
        ##sentence2
        stmt = "the green banana is next to the red apple"
        res = self.dialog.test('myself', stmt)
        
        ##sentence3
        stmt = "I see it"
        ###
        answer = "yes. I meant the green one"
        res = self.dialog.test('myself', stmt, answer)
        
        expected_result = ['* rdf:type See',
                            '* performedBy myself',
                            '* actsOnObject green_banana']
                            
        self.assertTrue(check_results(res[0], expected_result))
        
    
    def test_sentence7(self):
        
        print("\n##################### test_sentence7 - it ########################\n")
        
        #Fill up History
        
        ##sentence2
        stmt = "the green banana is next to the red apple"
        res = self.dialog.test('myself', stmt)
        
        ##sentence3
        stmt = "I see it"
        ###
        answer = "No. I mean the red apple"
        res = self.dialog.test('myself', stmt, answer)
        
        expected_result = ['* rdf:type See',
                            '* performedBy myself',
                            '* actsOnObject red_apple']
                            

        self.assertTrue(check_results(res[0], expected_result))
    
    
    def test_sentence8(self):
        
        print("\n##################### test_sentence8 - THIS NO FOCUS########################\n")
        #Fill up History
        ##sentence2
        stmt = "the green banana is next to the red apple"
        res = self.dialog.test('myself', stmt)
        
        ##sentence3
        self.oro.remove(['myself focusesOn y_banana'])
        
        stmt = "I see this"
        ###
        ### Expected Question: Do you mean the green banana?
        answer = "No. I mean the red apple"
        res = self.dialog.test('myself', stmt, answer)
        expected_result = ['* rdf:type See',
                            '* performedBy myself',
                            '* actsOnObject red_apple']
        
        self.oro.add(['myself focusesOn y_banana'])
        
        self.assertTrue(check_results(res[0], expected_result))
        
        
    def test_sentence8_bis(self):
        
        print("\n##################### test_sentence8 bis - THIS NO FOCUS########################\n")
        #Fill up History
        ##sentence2
        stmt = "the green banana is next to the red apple"
        res = self.dialog.test('myself', stmt)
        
        ##sentence3
        self.oro.remove(['myself focusesOn y_banana'])
        
        stmt = "I see this one"
        ###
        ### Expected Question: Do you mean the green banana?
        answer = "No. I mean the red apple"
        res = self.dialog.test('myself', stmt, answer)
        expected_result = ['* rdf:type See',
                            '* performedBy myself',
                            '* actsOnObject red_apple']
        
        self.oro.add(['myself focusesOn y_banana'])
        self.assertTrue(check_results(res[0], expected_result))
    
    def test_sentence8_ter(self):
        
        print("\n##################### test_sentence8 ter - THIS NO FOCUS########################\n")
        #Fill up History
        ##sentence2
        stmt = "the green banana is next to the red apple"
        res = self.dialog.test('myself', stmt)
        
        ##sentence3
        self.oro.remove(['myself focusesOn y_banana'])
        
        stmt = "I see this apple"
        ###
        res = self.dialog.test('myself', stmt)
        
        expected_result = ['* rdf:type See',
                            '* performedBy myself',
                            '* actsOnObject red_apple']
        
        self.oro.add(['myself focusesOn y_banana'])
        self.assertTrue(check_results(res[0], expected_result))
        
        
    def test_sentence9(self):
        
        print("\n##################### test_sentence9 - OTHER ########################\n")
        #Fill up History
        ##sentence1
        stmt = "the green banana is next to the red apple"
        res = self.dialog.test('myself', stmt)
        
        ##sentence2
        stmt = "the other banana is on the shelf."
        ###
        res = self.dialog.test('myself', stmt)
        
        expected_result = ['y_banana isOn shelf1']
        self.assertTrue(check_results(res[0], expected_result))
    
    def test_sentence9_bis(self):
        
        print("\n##################### test_sentence9_bis - OTHER ########################\n")
        #Fill up History
        ##sentence1
        stmt = "the green banana is next to the red apple"
        res = self.dialog.test('myself', stmt)
        
        ##sentence2
        stmt = "the other one is on the shelf."
        ###
        ### expected question: Do you mean the other banana?
        answer = "yes. the yellow banana"
        res = self.dialog.test('myself', stmt, answer)
        
        expected_result = ['y_banana isOn shelf1']
        self.assertTrue(check_results(res[0], expected_result))
    
    def test_sentence9_ter(self):
        
        print("\n##################### test_sentence9_ter - THIS OTHER ########################\n")
        #Fill up History
        ##sentence1
        stmt = "the green banana is next to the red apple"
        res = self.dialog.test('myself', stmt)
        
        ##sentence2
        self.oro.remove(['myself focusesOn y_banana'])
        
        stmt = "this other one is on the shelf."
        ###
        ### expected question: Do you mean the other banana?
        answer = "yes. the yellow banana"
        res = self.dialog.test('myself', stmt, answer)
        
        expected_result = ['y_banana isOn shelf1']
        
        self.oro.add(['myself focusesOn y_banana'])
        self.assertTrue(check_results(res[0], expected_result))
    
    def test_sentence9_quater(self):
        
        print("\n##################### test_sentence9_quater - THIS OTHER ########################\n")
        #Fill up History
        ##sentence1
        stmt = "the green banana is next to the red apple"
        res = self.dialog.test('myself', stmt)
        
        ##sentence2
        self.oro.remove(['myself focusesOn y_banana'])
        
        stmt = "this other banana is on the shelf."
        ###
        res = self.dialog.test('myself', stmt)
        
        expected_result = ['y_banana isOn shelf1']
        
        self.oro.add(['myself focusesOn y_banana'])
        self.assertTrue(check_results(res[0], expected_result))
    
    
    def test_sentence10(self):
        
        print("\n##################### test_sentence10 - SAME ########################\n")
        #Fill up History
        
        ##sentence1
        stmt = "the red apple is on the big tree"
        res = self.dialog.test('myself', stmt)
        
        
        ##sentence2
        stmt = "the green banana is next to the red apple"
        res = self.dialog.test('myself', stmt)
        
        ##sentence3
        stmt = "I see the same one"
        ###
        answer = "yes. I meant the green one"
        res = self.dialog.test('myself', stmt, answer)
        
        expected_result = ['* rdf:type See',
                            '* performedBy myself',
                            '* actsOnObject green_banana']
        
        
        self.assertTrue(check_results(res[0], expected_result))
    
    def test_sentence10_bis(self):
        
        print("\n##################### test_sentence10_bis - SAME ########################\n")
        #Fill up History
        
        ##sentence1
        stmt = "the red apple is on the big tree"
        res = self.dialog.test('myself', stmt)
        
        
        ##sentence2
        stmt = "the green banana is next to the red apple"
        res = self.dialog.test('myself', stmt)
        
        ##sentence3
        stmt = "I see the same apple"
        ###
        res = self.dialog.test('myself', stmt)
        
        expected_result = ['* rdf:type See',
                            '* performedBy myself',
                            '* actsOnObject red_apple']
        
        
        self.assertTrue(check_results(res[0], expected_result))
    
    
    def test_sentence11(self):
        
        print("\n##################### test_sentence11 - MODALS ########################\n")
        #Fill up History
        ##sentence1
        stmt = "I can take the green banana"
        res = self.dialog.test('myself', stmt)
        
        expected_result = ['myself canPerforms *',
                           '* rdf:type Get',
                           '* actsOnObject green_banana']
                           
        self.assertTrue(check_results(res[0], expected_result))
    
  
    def tearDown(self):
        self.dialog.stop()
        self.dialog.join()
        
        
class TestDiscriminateDialog(unittest.TestCase):
    """Tests the differents features of the Dialog module.
    This must be tested with oro-server using the testsuite.oro.owl ontology.
    """
    
    def setUp(self):
        self.dialog = Dialog()
        self.dialog.start()
        
        self.oro = ResourcePool().ontology_server
        
        try:
            self.oro.add(['shelf1 rdf:type Shelf',
                        'table1 rdf:type Table', 
                        'table2 rdf:type Table', 'table2 hasColor blue', 
                        'Banana rdfs:subClassOf Plant',
                        'y_banana rdf:type Banana','y_banana hasColor yellow','y_banana isOn shelf1',
                        'green_banana rdf:type Banana','green_banana hasColor green','green_banana isOn table2',
                        'ACCESSKIT rdf:type Gamebox', 'ACCESSKIT hasColor white', 'ACCESSKIT hasSize big', 'ACCESSKIT isOn table1',
                        'ORANGEBOX rdf:type Gamebox', 'ORANGEBOX hasColor orange', 'ORANGEBOX hasSize big', 'ORANGEBOX isOn ACCESSKIT',
                        'MYBOX rdf:type Gamebox', 'MYBOX hasColor orange', 'MYBOX hasSize small', 'MYBOX isOn ACCESSKIT',
                        'SPACENAVBOX rdf:type Gamebox', 'SPACENAVBOX hasColor white', 'SPACENAVBOX hasSize big', 'SPACENAVBOX isOn ACCESSKIT',
                        'y_bottle rdf:type Bottle', 'y_bottle isLocated RIGHT',
                        'r_bottle rdf:type Bottle', 'r_bottle isLocated FRONT',
                        'b_bottle rdf:type Bottle', 'b_bottle isLocated BACK'
                        ])
        except AttributeError: #the ontology server is not started of doesn't know the method
            pass

    def test_discriminate1(self):
        """ Color discriminant should be found"""
        
        print("\n##################### test_discriminate1 ########################\n")
        ####
        stmt = "the banana is good"
        answer = "the green one"
        ####
        res = self.dialog.test('myself', stmt, answer)
        print(res)
        expected_result = ['green_banana hasFeature good']
        self.assertTrue(check_results(res[0], expected_result))
    

        """ Color discriminant should be found"""
        
        print("\n##################### test_discriminate2 ########################\n")
        ####
        stmt = "the banana is good"
        answer = "the yellow one"
        ####
        res = self.dialog.test('myself', stmt, answer)
        print(res)
        expected_result = ['y_banana hasFeature good']
        self.assertTrue(check_results(res[0], expected_result))
        
    def test_discriminate3(self):
        """ Color discriminant should be found"""
        
        print("\n##################### test_discriminate3 ########################\n")
        ####
        stmt = "give me the banana"
        answer = "the green one"
        ####
        expected_result = [ 'myself desires *',
                            '* rdf:type Give',
                            '* performedBy myself',
                            '* actsOnObject green_banana',
                            '* receivedBy myself']
        ###
        res = self.dialog.test('myself', stmt, answer)
        print res
        self.assertTrue(check_results(res[0], expected_result))
        
        
    def test_discriminate4(self):
        """No ambiguity."""
        
        print("\n##################### test_discriminate4 ########################\n")
        ####
        stmt = "get the gamebox which is on the table"
        answer = None
        ####
        expected_result = [ 'myself desires *',
                            '* rdf:type Get',
                            '* performedBy myself',
                            '* actsOnObject ACCESSKIT']
        ###
        res = self.dialog.test('myself', stmt)
        print res
        self.assertTrue(check_results(res[0], expected_result))
        
    def test_discriminate5(self):
        """ Size discriminant should be found """

        print("\n##################### test_discriminate5 ########################\n")
        ####
        stmt = "get the orange gamebox"
        answer = "the big one"
        ####
        expected_result = [ 'myself desires *',
                            '* rdf:type Get',
                            '* performedBy myself',
                            '* actsOnObject ORANGEBOX']
        ###
        res = self.dialog.test('myself', stmt, answer)
        print res
        self.assertTrue(check_results(res[0], expected_result))

    def test_discriminate6(self):
        """No complete discriminant found. More info required"""
        
        print("\n##################### test_discriminate6 ########################\n")
        ####
        stmt = "get the big gamebox"
        answer = "the orange one"
        ####
        expected_result = [ 'myself desires *',
                            '* rdf:type Get',
                            '* performedBy myself',
                            '* actsOnObject ORANGEBOX']
        ###
        res = self.dialog.test('myself', stmt, answer)
        print res
        self.assertTrue(check_results(res[0], expected_result))


    def test_discriminate7(self):
        """ Location discriminant should be found """
        
        print("\n##################### test_discriminate7 ########################\n")
        ####
        stmt = "get the white gamebox"
        answer = "the one which is on the table1"
        ####
        expected_result = [ 'myself desires *',
                            '* rdf:type Get',
                            '* performedBy myself',
                            '* actsOnObject ACCESSKIT']
        ###
        res = self.dialog.test('myself', stmt, answer)
        print res
        self.assertTrue(check_results(res[0], expected_result))
    
    def test_discriminate8(self):
        """ Location wrt robot discriminant should be found """
        
        print("\n##################### test_discriminate8 ########################\n")
        ####
        stmt = "get the bottle"
        answer = "the one which is in front of you"
        ####
        expected_result = [ 'myself desires *',
                            '* rdf:type Get',
                            '* performedBy myself',
                            '* actsOnObject r_bottle']
        ###
        res = self.dialog.test('myself', stmt, answer)
        print res
        self.assertTrue(check_results(res[0], expected_result))

    def test_discriminate9(self):
        print("\n##################### Class grounding ########################\n")
        ####
        stmt = "a fruit is a plant"
        answer = "a kind of thing"
        ####
        expected_result = [ 'Plant rdfs:subClassOf Thing', 'Fruit rdfs:subClassOf Plant' ]
        ###
        res = self.dialog.test('myself', stmt, answer)
        print(res)
        self.assertTrue(check_results(res[0], expected_result))

    def tearDown(self):
        self.dialog.stop()
        self.dialog.join()



class TestQuestionHandlerDialog(unittest.TestCase):
    """Tests the processing of question by the Dialog module.
    This must be tested with oro-server using the testsuite.oro.owl ontology.
    """
    
    def setUp(self):
        self.dialog = Dialog()
        self.dialog.start()
        
        self.oro = ResourcePool().ontology_server
        
        try:
            self.oro.add(['shelf1 rdf:type Shelf',
                        'table1 rdf:type Table', 
                        'table2 rdf:type Table', 
                        'table2 hasColor blue', 
                        'Banana rdfs:subClassOf Plant',
                        'y_banana rdf:type Banana',
                        'y_banana hasColor yellow',
                        'y_banana isOn shelf1',
                        'green_banana rdf:type Banana',
                        'green_banana hasColor green',
                        'green_banana isOn table2',
                        'myself focusesOn y_banana',
                        'myself rdfs:label "Jido"',
                        'myself sees id_tom',
                        'myself sees y_banana',
                        'id_tom rdf:type Human',
                        'id_tom rdfs:label "Tom"',
                        'id_tom isNexto myself',                        
                        ])
            
        except AttributeError: #the ontology server is not started of doesn't know the method
            pass

    def test_question1_where(self):

        print("\n##################### test_question1_where ########################\n")
        
        ####
        stmt = "Where is the green banana?"
        ####
        
        ###
        res = self.dialog.test('myself', stmt)
        print ">> input:" , stmt
        print "<< output statements:", res
        self.assertTrue(res)
    
        
    
    def test_question2_what(self):

        print("\n##################### test_question2_what ########################\n")
        
        ####
        stmt = "What is yellow?"
        ####
        
        ###
        res = self.dialog.test('myself', stmt)
        print ">> input:" , stmt
        print "<< output statements:", res
        self.assertTrue(res)
        
    
    def test_question3_what(self):
        print("\n##################### test_question3_what ########################\n")
        
        stmt = "What object is yellow?"
        ####
        
        ###
        res = self.dialog.test('myself', stmt)
        print ">> input:" , stmt
        print "<< output statements:", res
        self.assertTrue(res)
        
    def test_question4_what(self):    
        print("\n##################### test_question4_what ########################\n")
        
        stmt = "What color is the banana that is on the table?"
        ####
        
        ###
        res = self.dialog.test('myself', stmt)
        print ">> input:" , stmt
        print "<< output statements:", res
        self.assertTrue(res)
    
    def test_question5_what(self):    
        print("\n##################### test_question5_what ########################\n")
        
        stmt = "What is this?"
        ####
        
        ###
        res = self.dialog.test('myself', stmt)
        print ">> input:" , stmt
        print "<< output statements:", res
        self.assertTrue(res)

    
    def test_question6_who(self):

        print("\n##################### test_question6_who ########################\n")
        
        ####
        stmt = "Who are you?"
        ####
        
        ###
        res = self.dialog.test('myself', stmt)
        print ">> input:" , stmt
        print "<< output statements:", res
        self.assertTrue(res)
    
    def test_question7_who(self):
        print("\n##################### test_question7_who ########################\n")
        
        stmt = "Who is the myself?"
        ####
        
        ###
        res = self.dialog.test('myself', stmt)
        print ">> input:" , stmt
        print "<< output statements: ", res
        self.assertTrue(res)
        
    def test_question8_who(self):
        print("\n##################### test_question8_who ########################\n")
        
        question = "Who do you see?"

        res = self.dialog.test('myself', question)
        print ">> input:" , stmt
        print "<< output statements:", res
        
        expected_query = [ 'myself sees ?*']
        
        self.assertTrue(check_results(res[0], expected_result))
        
        self.assertEquals(res[1][1], "I see Tom and the yellow banana that is on the self")
        
    def test_question9_who(self):
        print("\n##################### test_question9_who ########################\n")
        
        stmt = "Who is Tom?"
        ####
        
        ###
        res = self.dialog.test('myself', stmt)
        print ">> input:" , stmt
        print "<< output statements:", res
        self.assertEquals(res[1][1], "Tom is Tom")

def test_question10(self):
        print("\n##################### Check we resolve correctly the labels ########################\n")
        
        question = "What humans do you know?"
        ####
        
        ###
        res = self.dialog.test('ACHILLE', question)
        print ">> input:" , stmt
        print "<< output statements:", res
        
        expected_query = [ 'myself knows ?*']
        
        self.assertTrue(check_results(res[0], expected_query))
        
        self.assertEquals(res[1][1], "I know Tom")


class TestISUDialog(unittest.TestCase):
    """Tests the differents features of the Dialog module.
    This must be tested with oro-server using the testsuite.oro.owl ontology.
    """
    
    def setUp(self):
        self.dialog = Dialog()
        self.dialog.start()
        
        self.oro = ResourcePool().ontology_server
        
        try:
            
            self.oro.add(['ACHILE_HUMAN1 rdf:type Human', 'HRP2TABLE rdf:type Table',
                        'BLUE_TRASHBIN rdf:type Trashbin',
                        'PINK_TRASHBIN rdf:type Trashbin',
                        'BLACK_TAPE rdf:type VideoTape', 'BLACK_TAPE isIn BLUE_TRASHBIN',
                        'GREY_TAPE rdf:type VideoTape', 'GREY_TAPE isOn HRP2TABLE'])
                        
            self.oro.addForAgent('ACHILE_HUMAN1',
                        ['BLUE_TRASHBIN rdf:type Trashbin',
                        'PINK_TRASHBIN rdf:type Trashbin',
                        'BLACK_TAPE rdf:type VideoTape', 'BLACK_TAPE isIn PINK_TRASHBIN',
                        'GREY_TAPE rdf:type VideoTape', 'GREY_TAPE isOn HRP2TABLE'])
                        
        except AttributeError: #the ontology server is not started of doesn't know the method
            pass

    def test_ISU1(self):
        """"""
        
        print("\n##################### test_discriminate1 ########################\n")
        ####
        stmt = "give me the videotape which is in the PINK_TRASHBIN."
        answer = None
        ####
        res = self.dialog.test('ACHILE_HUMAN1', stmt, answer)
         
        expected_result = ['* rdf:type Give',
                            '* performedBy myself',
                            'ACHILE_HUMAN1 desires *',
                            '* actsOnObject BLACK_TAPE'
                            '* receivedBy ACHILE_HUMAN1']

        self.assertTrue(check_results(res[0], expected_result))
    

    def tearDown(self):
        self.dialog.stop()
        self.dialog.join()

class TestMovingToLondonScenario(unittest.TestCase):
    """
    Scenario
    --------
    ACHILLE and JULIE are moving from Toulouse to London, and they must
    pack everything before leaving. ACHILLE is sorting its video tapes, and he 
    throws away the oldest ones. Jido is watching him.

    Setup:
      One trashbin, one cardboard box, 2 tapes on the table [TAPE1 = Lord of 
      the Rings (lotr) and TAPE2 = HotShots2 (hs2)].
    """
    
    def setUp(self):
        self.dialog = Dialog()
        self.dialog.start()
        
        self.oro = ResourcePool().ontology_server
        
        try:
            
            self.oro.reset()
            
            self.oro.add([  'ACHILLE rdf:type Human',
                            'ACHILLE rdfs:label Achille',
                            'JULIE rdf:type Human', 
                            'JULIE rdfs:label Julie',
                            'TABLE rdf:type Table',
                            'Trashbin rdfs:subClassOf Box',
                            'CardBoardBox rdfs:subClassOf Box',
                            'CardBoardBox rdfs:label "cardboard box"',
                            'TRASHBIN rdf:type Trashbin',
                            'CARDBOARD_BOX rdf:type CardBoardBox',
                            'CARDBOARD_BOX isOn TABLE',
                            'TAPE1 rdf:type VideoTape', 
                            'TAPE1 rdfs:label "The Lords of the rings"', 
                            'TAPE1 isOn TABLE',
                            'TAPE2 rdf:type VideoTape', 
                            'TAPE2 rdfs:label "Hot Shots 2"', 
                            'TAPE2 isOn TABLE',])
            """           
            self.oro.addForAgent('ACHILLE',
                        ['BLUE_TRASHBIN rdf:type Trashbin',
                        'PINK_TRASHBIN rdf:type Trashbin',
                        'BLACK_TAPE rdf:type VideoTape', 'BLACK_TAPE isIn PINK_TRASHBIN',
                        'GREY_TAPE rdf:type VideoTape', 'GREY_TAPE isOn HRP2TABLE'])
            """        
        except AttributeError: #the ontology server is not started of doesn't know the method
            print("Couldn't connect to the ontology server. Aborting the test.")
            sys.exit(0)

    def test_step1(self):
        """ACHILE puts TAPE1 in CARDBOARDBOX"""

        self.oro.add(['TAPE1 isIn CARDBOARD_BOX'])
                            
        stmt = "Jido, what is in the box?"
        answer = "This box"
        ####
        res = self.dialog.test('ACHILE', stmt, answer)
         
        expected_result = ['* rdf:type Give',
                            '* performedBy myself',
                            'ACHILE_HUMAN1 desires *',
                            '* actsOnObject BLACK_TAPE'
                            '* receivedBy ACHILE_HUMAN1']

        self.assertTrue(check_results(res[0], expected_result))
    

    def tearDown(self):
        self.dialog.stop()
        self.dialog.join()
    
def usage():
    print """Unit-testing for the LAAS-CNRS 'Dialog' module.

All these tests require the ontology server (ORO) running on localhost:6969 and
loaded with testsuite.oro.owl

Usage:
dialog_test OPTION
  help              Displays this message and exits
  
  --- Base testing ---
  parser            Tests the parser
  verbalization     Tests the verbalization module
  statements        First round of simple tests that produces statements
  discrimination    Tests the discrimination code 
                    (while run 'statements' tests as well)
  questions         Tests the question handler
  all               Runs all base test suites
  
  --- Complete scenario testing ---
  These scripts test complete interactions, from past HRI scenarii
  
  sc_moving         Scenario "Achille is moving to London"
"""
if __name__ == '__main__':
    
    opts = sys.argv[1:]
    if len(opts) == 0:
        usage()
        sys.exit(0)
        
    # executing only some tests
    
    suiteSimpleSentences = unittest.TestLoader().loadTestsFromTestCase(TestBaseSentenceDialog)
    
    suiteDiscriminate = unittest.TestSuite()
    suiteDiscriminate.addTest(TestDiscriminateDialog('test_discriminate1'))
    suiteDiscriminate.addTest(TestDiscriminateDialog('test_discriminate3'))
    suiteDiscriminate.addTest(TestDiscriminateDialog('test_discriminate4'))
    suiteDiscriminate.addTest(TestDiscriminateDialog('test_discriminate5'))
    suiteDiscriminate.addTest(TestDiscriminateDialog('test_discriminate6'))
    suiteDiscriminate.addTest(TestDiscriminateDialog('test_discriminate7'))
    suiteDiscriminate.addTest(TestDiscriminateDialog('test_discriminate8'))
    suiteDiscriminate.addTest(TestDiscriminateDialog('test_discriminate9'))
    
    suiteQuestionHandler = unittest.TestSuite()
    suiteQuestionHandler.addTest(TestQuestionHandlerDialog('test_question1_where'))
    suiteQuestionHandler.addTest(TestQuestionHandlerDialog('test_question2_what'))
    suiteQuestionHandler.addTest(TestQuestionHandlerDialog('test_question3_what'))
    suiteQuestionHandler.addTest(TestQuestionHandlerDialog('test_question4_what'))
    suiteQuestionHandler.addTest(TestQuestionHandlerDialog('test_question5_what'))
    suiteQuestionHandler.addTest(TestQuestionHandlerDialog('test_question6_who'))
    suiteQuestionHandler.addTest(TestQuestionHandlerDialog('test_question7_who'))
    suiteQuestionHandler.addTest(TestQuestionHandlerDialog('test_question8_who'))
    suiteQuestionHandler.addTest(TestQuestionHandlerDialog('test_question9_who'))
    
    suiteISU = unittest.TestSuite()
    suiteISU.addTest(TestISUDialog('test_ISU1'))
    
    suite = unittest.TestSuite()
    
    if opts[0] in ['-h', '--help', 'help']:
        usage()
        sys.exit(0)
    if opts[0] in ['parser']:
        #TODO: Parser.unit_test should export a testsuite!!
        parser.unit_tests()
        sys.exit(0)
    if opts[0] in ['verbalization', 'all']:
        suite.addTests(verbalization.test_suite()._tests)
    if opts[0] in ['statements', 'discrimination', 'all']:
        testSuites.append(suiteSimpleSentences)
    if opts[0] in ['discrimination', 'all']:
        testSuites.append(suiteDiscriminate)
    if opts[0] in ['questions', 'all']:
        testSuites.append(suiteQuestionHandler)

    unittest.TextTestRunner(verbosity=2).run(suite)
