#!/usr/bin/python
# -*- coding: utf-8 -*-

import sys
import logging

import unittest
import getopt

import operator

import dialog.verbalization.verbalization_test as verbalization
import dialog.parsing.parser_test as parser
import dialog.sentence_test as sentence
import dialog.interpretation.discrimination_test as discrimination
import dialog.interpretation.statements_builder_test as statements_builder
import dialog.interpretation.questions_handler_test as questions_handler

from dialog.dialog_core import Dialog

from dialog.resources_manager import ResourcePool

from dialog.sentence import *
from dialog.parsing.parser import Parser

LOG_FILENAME = "dialog_test.log"

def check_results(res, expected):
    def check_triplets(tr , te):
        tr_split = tr.split()
        te_split = te.split()
        
        return (tr_split[0] == te_split[0] or te_split[0] == '*') and\
                (tr_split[1] == te_split[1]) and\
                (tr_split[2] == te_split[2] or te_split[2] == '*')       
    while res:
        r = res.pop()
        for e in expected:
            if check_triplets(r, e):
                expected.remove(e)
    return expected == res
    
class TestBaseSentenceDialog(unittest.TestCase):
    """Tests the processing of simple sentence by the Dialog module.
    These sentences don't require discrimination.
    This must be tested with oro-server using the testsuite.oro.owl ontology.
    """

    def setUp(self):
        self.dialog = Dialog()
        self.dialog.start()
        
        self.oro = ResourcePool().ontology_server
        
        try:
            self.oro.add(['shelf1 rdf:type Shelf',
                        'table1 rdf:type Table', 
                        'table2 rdf:type Table', 
                        'table2 hasColor blue', 
                        'Banana rdfs:subClassOf Plant',
                        'y_banana rdf:type Banana',
                        'y_banana hasColor yellow',
                        'y_banana isOn shelf1',
                        'y_banana belongsTo myself',
                        'green_banana rdf:type Banana',
                        'green_banana hasColor green',
                        'green_banana isOn table2',
                        'myself focusesOn y_banana',
                        'big_tree rdf:type Tree',
                        'big_tree hasSize big',
                        'red_apple rdf:type Apple',
                        'red_apple hasColor red'
                        ])
            
        except AttributeError: #the ontology server is not started of doesn't know the method
            pass

    def test_sentence1(self):

        print("\n##################### test_sentence1 ########################\n")
        
        ####
        stmt = "put the yellow banana on the shelf"
        ####

        expected_result = [ 'myself desires *',
                            '* rdf:type Place',
                            '* performedBy myself',
                            '* actsOnObject y_banana',
                            '* receivedBy shelf1']
        ###
        res = self.dialog.test('myself', stmt)
        self.assertTrue(check_results(res[0], expected_result))
        

    def test_sentence2(self):
        
        print("\n##################### test_sentence2 ########################\n")

        ####
        stmt = "give me the green banana"
        ####
        expected_result = [ 'myself desires *',
                            '* rdf:type Give',
                            '* performedBy myself',
                            '* actsOnObject green_banana',
                            '* receivedBy myself']
        ###
        res = self.dialog.test('myself', stmt)
        self.assertTrue(check_results(res[0], expected_result))
        

    def test_sentence3(self):
        
        print("\n##################### Simple statements ########################\n")              
                
        ####
        stmt = "the yellow banana is green"
        ####
        expected_result = ['y_banana hasColor green']
        ###
        res = self.dialog.test('myself', stmt)
        
        ###Check ontology consistency
        self.assertFalse(self.oro.safeAdd(res))
        ### Check result
        self.assertTrue(check_results(res[0], expected_result))
        
        
        ####
        stmt = "the green banana is good"
        ####
        res = self.dialog.test('myself', stmt)
        ###
        expected_result = ['green_banana hasFeature good']
        self.assertTrue(check_results(res[0], expected_result))
        
    def test_sentence4(self):
        
        print("\n##################### Subclasses ########################\n")
        ####
        stmt = "bananas are fruits"
        ####
        res = self.dialog.test('myself', stmt)
        ###
        expected_result = ['Banana rdfs:subClassOf Fruit']
        self.assertTrue(check_results(res[0], expected_result))
        
        
        ####
        stmt = "A banana is a fruit"
        ####
        res = self.dialog.test('myself', stmt)
        ###
        expected_result = ['Banana rdfs:subClassOf Fruit']
        self.assertTrue(check_results(res[0], expected_result))
    
        
        
    def test_sentence5(self):
        
        print("\n##################### test_sentence5 - THIS ########################\n")
        ####
        stmt = "This is my banana"
        ####
        res = self.dialog.test('myself', stmt)
        ###
        expected_result = ['y_banana belongsTo myself']
        self.assertTrue(check_results(res[0], expected_result))
        
        stmt = "This is a green banana" ## ERROR -> y_banana can not be green
        ####
        res = self.dialog.test('myself', stmt)
        ###
        self.assertFalse(self.oro.safeAdd(res))
        
        stmt = "This is a fruit" 
        ####
        res = self.dialog.test('myself', stmt)
        ###
        expected_result = ['y_banana rdf:type Fruit']

        self.assertTrue(check_results(res[0], expected_result))

    def test_sentence6(self):
        
        print("\n##################### test_sentence6 - it ########################\n")
        #Fill up History
        
        ##sentence1
        stmt = "the red apple is on the big tree"
        res = self.dialog.test('myself', stmt)
        
        
        ##sentence2
        stmt = "the green banana is next to the red apple"
        res = self.dialog.test('myself', stmt)
        
        ##sentence3
        stmt = "I see it"
        ###
        answer = "yes. I meant the green one"
        res = self.dialog.test('myself', stmt, answer)
        
        expected_result = ['* rdf:type See',
                            '* performedBy myself',
                            '* actsOnObject green_banana']
                            
        self.assertTrue(check_results(res[0], expected_result))
        
    
    def test_sentence7(self):
        
        print("\n##################### test_sentence7 - it ########################\n")
        
        #Fill up History
        
        ##sentence2
        stmt = "the green banana is next to the red apple"
        res = self.dialog.test('myself', stmt)
        
        ##sentence3
        stmt = "I see it"
        ###
        answer = "No. I mean the red apple"
        res = self.dialog.test('myself', stmt, answer)
        
        expected_result = ['* rdf:type See',
                            '* performedBy myself',
                            '* actsOnObject red_apple']
                            

        self.assertTrue(check_results(res[0], expected_result))
    
    
    def test_sentence8(self):
        
        print("\n##################### test_sentence8 - THIS NO FOCUS########################\n")
        #Fill up History
        ##sentence2
        stmt = "the green banana is next to the red apple"
        res = self.dialog.test('myself', stmt)
        
        ##sentence3
        self.oro.remove(['myself focusesOn y_banana'])
        
        stmt = "I see this"
        ###
        ### Expected Question: Do you mean the green banana?
        answer = "No. I mean the red apple"
        res = self.dialog.test('myself', stmt, answer)
        expected_result = ['* rdf:type See',
                            '* performedBy myself',
                            '* actsOnObject red_apple']
        
        self.oro.add(['myself focusesOn y_banana'])
        
        self.assertTrue(check_results(res[0], expected_result))
        
        
    def test_sentence8_bis(self):
        
        print("\n##################### test_sentence8 bis - THIS NO FOCUS########################\n")
        #Fill up History
        ##sentence2
        stmt = "the green banana is next to the red apple"
        res = self.dialog.test('myself', stmt)
        
        ##sentence3
        self.oro.remove(['myself focusesOn y_banana'])
        
        stmt = "I see this one"
        ###
        ### Expected Question: Do you mean the green banana?
        answer = "No. I mean the red apple"
        res = self.dialog.test('myself', stmt, answer)
        expected_result = ['* rdf:type See',
                            '* performedBy myself',
                            '* actsOnObject red_apple']
        
        self.oro.add(['myself focusesOn y_banana'])
        self.assertTrue(check_results(res[0], expected_result))
    
    def test_sentence8_ter(self):
        
        print("\n##################### test_sentence8 ter - THIS NO FOCUS########################\n")
        #Fill up History
        ##sentence2
        stmt = "the green banana is next to the red apple"
        res = self.dialog.test('myself', stmt)
        
        ##sentence3
        self.oro.remove(['myself focusesOn y_banana'])
        
        stmt = "I see this apple"
        ###
        res = self.dialog.test('myself', stmt)
        
        expected_result = ['* rdf:type See',
                            '* performedBy myself',
                            '* actsOnObject red_apple']
        
        self.oro.add(['myself focusesOn y_banana'])
        self.assertTrue(check_results(res[0], expected_result))
        
        
    def test_sentence9(self):
        
        print("\n##################### test_sentence9 - OTHER ########################\n")
        #Fill up History
        ##sentence1
        stmt = "the green banana is next to the red apple"
        res = self.dialog.test('myself', stmt)
        
        ##sentence2
        stmt = "the other banana is on the shelf."
        ###
        res = self.dialog.test('myself', stmt)
        
        expected_result = ['y_banana isOn shelf1']
        self.assertTrue(check_results(res[0], expected_result))
    
    def test_sentence9_bis(self):
        
        print("\n##################### test_sentence9_bis - OTHER ########################\n")
        #Fill up History
        ##sentence1
        stmt = "the green banana is next to the red apple"
        res = self.dialog.test('myself', stmt)
        
        ##sentence2
        stmt = "the other one is on the shelf."
        ###
        ### expected question: Do you mean the other banana?
        answer = "yes. the yellow banana"
        res = self.dialog.test('myself', stmt, answer)
        
        expected_result = ['y_banana isOn shelf1']
        self.assertTrue(check_results(res[0], expected_result))
    
    def test_sentence9_ter(self):
        
        print("\n##################### test_sentence9_ter - THIS OTHER ########################\n")
        #Fill up History
        ##sentence1
        stmt = "the green banana is next to the red apple"
        res = self.dialog.test('myself', stmt)
        
        ##sentence2
        self.oro.remove(['myself focusesOn y_banana'])
        
        stmt = "this other one is on the shelf."
        ###
        ### expected question: Do you mean the other banana?
        answer = "yes. the yellow banana"
        res = self.dialog.test('myself', stmt, answer)
        
        expected_result = ['y_banana isOn shelf1']
        
        self.oro.add(['myself focusesOn y_banana'])
        self.assertTrue(check_results(res[0], expected_result))
    
    def test_sentence9_quater(self):
        
        print("\n##################### test_sentence9_quater - THIS OTHER ########################\n")
        #Fill up History
        ##sentence1
        stmt = "the green banana is next to the red apple"
        res = self.dialog.test('myself', stmt)
        
        ##sentence2
        self.oro.remove(['myself focusesOn y_banana'])
        
        stmt = "this other banana is on the shelf."
        ###
        res = self.dialog.test('myself', stmt)
        
        expected_result = ['y_banana isOn shelf1']
        
        self.oro.add(['myself focusesOn y_banana'])
        self.assertTrue(check_results(res[0], expected_result))
    
    
    def test_sentence10(self):
        
        print("\n##################### test_sentence10 - SAME ########################\n")
        #Fill up History
        
        ##sentence1
        stmt = "the red apple is on the big tree"
        res = self.dialog.test('myself', stmt)
        
        
        ##sentence2
        stmt = "the green banana is next to the red apple"
        res = self.dialog.test('myself', stmt)
        
        ##sentence3
        stmt = "I see the same one"
        ###
        answer = "yes. I meant the green one"
        res = self.dialog.test('myself', stmt, answer)
        
        expected_result = ['* rdf:type See',
                            '* performedBy myself',
                            '* actsOnObject green_banana']
        
        
        self.assertTrue(check_results(res[0], expected_result))
    
    def test_sentence10_bis(self):
        
        print("\n##################### test_sentence10_bis - SAME ########################\n")
        #Fill up History
        
        ##sentence1
        stmt = "the red apple is on the big tree"
        res = self.dialog.test('myself', stmt)
        
        
        ##sentence2
        stmt = "the green banana is next to the red apple"
        res = self.dialog.test('myself', stmt)
        
        ##sentence3
        stmt = "I see the same apple"
        ###
        res = self.dialog.test('myself', stmt)
        
        expected_result = ['* rdf:type See',
                            '* performedBy myself',
                            '* actsOnObject red_apple']
        
        
        self.assertTrue(check_results(res[0], expected_result))
    
    
    def test_sentence11(self):
        
        print("\n##################### test_sentence11 - MODALS ########################\n")
        #Fill up History
        ##sentence1
        stmt = "I can take the green banana"
        res = self.dialog.test('myself', stmt)
        
        expected_result = ['myself canPerforms *',
                           '* rdf:type Get',
                           '* actsOnObject green_banana']
                           
        self.assertTrue(check_results(res[0], expected_result))
    
  
    def tearDown(self):
        self.dialog.stop()
        self.dialog.join()


class TestMovingToLondonScenario(unittest.TestCase):
    """
    Scenario
    --------
    ACHILLE and JULIE are moving from Toulouse to London, and they must
    pack everything before leaving. ACHILLE is sorting its video tapes, and he 
    throws away the oldest ones. Jido is watching him.

    Setup:
      One trashbin, one cardboard box, 2 tapes on the table [TAPE1 = Lord of 
      the Rings (lotr) and TAPE2 = HotShots2 (hs2)].
    """
    
    def setUp(self):
        self.dialog = Dialog()
        self.dialog.start()
        
        self.oro = ResourcePool().ontology_server
        
        try:
            
            self.oro.reset()
            
            self.oro.add([  'ACHILLE rdf:type Human',
                            'ACHILLE rdfs:label Achille',
                            'JULIE rdf:type Human', 
                            'JULIE rdfs:label Julie',
                            'TABLE rdf:type Table',
                            'Trashbin rdfs:subClassOf Box',
                            'CardBoardBox rdfs:subClassOf Box',
                            'CardBoardBox rdfs:label "cardboard box"',
                            'TRASHBIN rdf:type Trashbin',
                            'CARDBOARD_BOX rdf:type CardBoardBox',
                            'CARDBOARD_BOX isOn TABLE',
                            'TAPE1 rdf:type VideoTape', 
                            'TAPE1 rdfs:label "The Lords of the rings"', 
                            'TAPE1 isOn TABLE',
                            'TAPE2 rdf:type VideoTape', 
                            'TAPE2 rdfs:label "Hot Shots 2"', 
                            'TAPE2 isOn TABLE',])
            """           
            self.oro.addForAgent('ACHILLE',
                        ['BLUE_TRASHBIN rdf:type Trashbin',
                        'PINK_TRASHBIN rdf:type Trashbin',
                        'BLACK_TAPE rdf:type VideoTape', 'BLACK_TAPE isIn PINK_TRASHBIN',
                        'GREY_TAPE rdf:type VideoTape', 'GREY_TAPE isOn HRP2TABLE'])
            """        
        except AttributeError: #the ontology server is not started of doesn't know the method
            print("Couldn't connect to the ontology server. Aborting the test.")
            sys.exit(0)

    def test_step1(self):
        """ACHILE puts TAPE1 in CARDBOARDBOX"""

        self.oro.add(['TAPE1 isIn CARDBOARD_BOX'])
                            
        stmt = "Jido, what is in the box?"
        answer = "This box"
        ####
        res = self.dialog.test('ACHILE', stmt, answer)
         
        expected_result = ['* rdf:type Give',
                            '* performedBy myself',
                            'ACHILE_HUMAN1 desires *',
                            '* actsOnObject BLACK_TAPE'
                            '* receivedBy ACHILE_HUMAN1']

        self.assertTrue(check_results(res[0], expected_result))
    

    def tearDown(self):
        self.dialog.stop()
        self.dialog.join()
    
def usage():
    print """Unit-testing for the LAAS-CNRS 'Dialog' module.

All these tests require the ontology server (ORO) running on localhost:6969 and
loaded with commonsense.oro.owl and robot.oro.owl

Usage:
dialog_test [OPTIONS] TEST_SUITE
  -h, --help               Displays this message and exits
  -l, --log=[file|stdout]  Where to log: file (in """ + LOG_FILENAME + """) 
                           or stdout (default).
  
  Available test suites (you call several of them):
  
   * Base testing:
   
  sentence          Tests the sentence creation and merging functions
  parser            Tests the parser
  verbalization     Tests the verbalization module
  statements        First round of simple tests that produces statements
  discrimination    Tests the discrimination code 
  questions         Tests the question handler
  
  all               Runs all base test suites
  
   * Complete scenario testing:
  These scripts test complete interactions, from past HRI scenarii
  
  sc_moving         Scenario "Achille is moving to London"
"""
if __name__ == '__main__':
    
    logger = logging.getLogger('dialog')
    
    logger.setLevel(logging.DEBUG)

    if len(sys.argv[1:]) == 0:
        usage()
        sys.exit(0)
    
    log_handler = logging.StreamHandler()
    formatter = logging.Formatter("%(message)s")
    
    try:
        optlist, args = getopt.getopt(sys.argv[1:], 'hl:', ['help', 'log='])
    except getopt.GetoptError, err:
        # print help information and exit:
        print str(err) # will print something like "option -a not recognized"
        usage()
        sys.exit(2)

    for o, a in optlist:
        if o in ("-h", "--help"):
            usage()
            sys.exit(0)
        elif o in ("-l", "--log"):
            if a == "file":
                print("The output of the unit-tests will be saved in " + LOG_FILENAME)
                log_handler = logging.FileHandler(LOG_FILENAME)
        else:
            print "Unhandled option " + o
            usage()
            sys.exit(2)

    # add formatter to log_handler
    log_handler.setFormatter(formatter)
    # add log_handler to logger
    logger.addHandler(log_handler)

    results = {}
    
    if 'parser' in args or 'all' in args:
        suite = parser.test_suite()
        result = unittest.TextTestRunner(verbosity=2).run(suite)
        results['parser'] = (suite.countTestCases(), result.testsRun, len(result.failures) , len(result.errors))

    if 'sentence' in args or 'all' in args:
        suite = sentence.test_suite()
        result = unittest.TextTestRunner(verbosity=2).run(suite)
        results['sentence'] = (suite.countTestCases(), result.testsRun, len(result.failures) , len(result.errors))
    
    if 'verbalization' in args or 'all' in args:
        suite = verbalization.test_suite()
        result = unittest.TextTestRunner(verbosity=2).run(suite)
        results['verbalization'] = (suite.countTestCases(), result.testsRun, len(result.failures) , len(result.errors))
    
    if 'statements' in args or 'all' in args:
        suite = statements_builder.test_suite()
        result = unittest.TextTestRunner(verbosity=2).run(suite)
        results['statements'] = (suite.countTestCases(), result.testsRun, len(result.failures) , len(result.errors))
        
    if 'discrimination' in args or 'all' in args:
        suite = discrimination.test_suite()
        result = unittest.TextTestRunner(verbosity=2).run(suite)
        results['discrimination'] = (suite.countTestCases(), result.testsRun, len(result.failures) , len(result.errors))
        
    if 'questions' in args or 'all' in args:
        suite = questions_handler.test_suite()
        result = unittest.TextTestRunner(verbosity=2).run(suite)
        results['questions'] = (suite.countTestCases(), result.testsRun, len(result.failures) , len(result.errors))
    
    total = (0,0,0,0)
    print("\n\n===============================================================")
    print("| suite            | nb tests | tests run | failures | errors |")
    print("|-------------------------------------------------------------|")
    for name in results:
        total = map(operator.add, total, results[name])
        print(  "| " + name + (" "* (17 - len(name))) + \
                "|   % 3d    |    % 3d    |   % 3d    |  % 3d   |" % (results[name]))
        print("|-------------------------------------------------------------|")
        
    print("| TOTAL            |  % 4d    |   % 4d    |   % 3d    |  % 3d   |" % (tuple(total)))
    print("===============================================================")
